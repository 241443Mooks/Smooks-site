---
interface Props {
  href?: string;
  type?: 'button' | 'submit' | 'reset';
  variant?: 'primary' | 'secondary' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  ariaLabel?: string;
}
const { href, type = 'button', variant = 'primary', size = 'md', ariaLabel } = Astro.props;
const sizeCls = { sm: 'px-3 py-1.5 text-sm', md: 'px-4 py-2', lg: 'px-5 py-3 text-lg' }[size];

const base = `inline-flex items-center justify-center rounded-[var(--radius-md)]
  font-medium transition-[background,transform,box-shadow] duration-[var(--dur-1)] ease-[var(--ease)]
  focus-visible:outline-2 focus-visible:outline-[var(--focus)] focus-visible:outline-offset-2
  active:scale-[.99]`;

const variants = {
  primary: `bg-[var(--c-primary)] text-[var(--c-primary-contrast)] hover:brightness-95`,
  secondary:`bg-[var(--c-surface)] text-[var(--c-on-bg)] hover:bg-[color-mix(in oklab,var(--c-surface) 85%, var(--fg) 15%)] border border-[var(--border)]`,
  ghost:   `bg-transparent text-[var(--c-on-bg)] hover:bg-[color-mix(in oklab,var(--c-surface) 60%, transparent)]`,
};
const cls = `${base} ${variants[variant]} ${sizeCls} shadow-sm`;
---
{href ? (
  <a href={href} class={cls} aria-label={ariaLabel}><slot /></a>
) : (
  <button type={type} class={cls} aria-label={ariaLabel}><slot /></button>
)}
