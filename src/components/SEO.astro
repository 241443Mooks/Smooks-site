---
type Props = {
  title?: string;
  description?: string;
  type?: 'website' | 'article';
  ogImage?: string; // explicit override if provided by page
};

const {
  title = 'SMooks â€” Education Systems & Transformation',
  description = 'Systems wins, playbooks, and writing by Sharron Mooks',
  type = 'website',
  ogImage,
} = Astro.props as Props;

// Base + current path
const base = Astro.site?.toString() ?? 'https://smooks.co.uk';
const pathname = Astro.url.pathname.replace(/\/$/, ''); // drop trailing slash

// Choose OG image: explicit prop > generated for detail pages > default
let ogPath =
  ogImage ??
  (pathname.startsWith('/writing') ||
   pathname.startsWith('/system-wins') ||
   pathname.startsWith('/playbooks')
    ? `/og${pathname}.png`
    : '/og/default.png');

const ogUrl = new URL(ogPath, base).toString();
const canonical = new URL(Astro.url.pathname, base).toString();
---

<title>{title}</title>
<meta name="description" content={description} />
<link rel="canonical" href={canonical} />

<meta property="og:type" content={type} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:url" content={canonical} />
<meta property="og:image" content={ogUrl} />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />

<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
<meta name="twitter:image" content={ogUrl} />
