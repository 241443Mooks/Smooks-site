---
import { getCollection } from "astro:content";
import { slugify } from "@/utils/slugify";

const { currentSlug, currentType, tags = [], year } = Astro.props as {
  currentSlug: string; currentType: "Case Study" | "System Win" | "Writing"; tags?: string[]; year?: number;
};

const pools = {
  "Case Study": await getCollection("caseStudies"),
  "System Win": await getCollection("systemWins"),
  "Writing": await getCollection("writing"),
};

const list = pools[currentType]
  .filter((e) => (e.slug ?? e.id) !== currentSlug)
  .map((e) => ({
    slug: slugify(e.slug ?? e.id ?? e.data.title),
    title: e.data.title,
    summary: e.data.summary,
    tags: e.data.tags ?? [],
    year: e.data.year,
  }))
  .map((i) => {
    const tagScore = i.tags.filter((t) => tags.includes(t)).length;
    const yearScore = year ? Math.max(0, 3 - Math.abs((i.year ?? 0) - year)) : 0;
    return { ...i, score: tagScore * 2 + yearScore };
  })
  .sort((a, b) => b.score - a.score)
  .slice(0, 3);
---

{list.length ? (
  <aside class="mt-12">
    <h3 class="text-lg font-semibold">Related</h3>
    <ul class="mt-3 grid gap-4 sm:grid-cols-2">
      {list.map((i) => (
        <li>
          <a href={`/${currentType === "Writing" ? "writing" : currentType === "System Win" ? "system-wins" : "portfolio"}/${i.slug}`} class="block rounded-2xl border p-4 hover:shadow-lg transition">
            <div class="text-xs text-gray-500">{i.year}</div>
            <div class="font-medium">{i.title}</div>
            <p class="mt-1 text-sm text-gray-600">{i.summary}</p>
          </a>
        </li>
      ))}
    </ul>
  </aside>
) : null}
