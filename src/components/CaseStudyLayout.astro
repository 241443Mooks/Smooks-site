---
import Base from "@/layouts/Base.astro";
import type { CaseStudy } from "../data/caseStudies";

interface Props {
  entry: CaseStudy;
}
const { entry } = Astro.props;
const { title, summary, units = [], tags = [], date, alignment = [], body } = entry;

function markdownToHtml(md: string): string {
  const lines = md.split("\n");
  let html = "";
  let inList = false;
  for (const line of lines) {
    if (line.startsWith("## ")) {
      if (inList) {
        html += "</ul>";
        inList = false;
      }
      html += `<h2>${line.slice(3)}</h2>`;
    } else if (line.startsWith("- ")) {
      if (!inList) {
        html += "<ul>";
        inList = true;
      }
      html += `<li>${line.slice(2)}</li>`;
    } else if (line.trim() === "") {
      if (inList) {
        html += "</ul>";
        inList = false;
      }
    } else {
      if (inList) {
        html += "</ul>";
        inList = false;
      }
      html += `<p>${line}</p>`;
    }
  }
  if (inList) html += "</ul>";
  return html.replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>");
}

const code = markdownToHtml(body);

const jsonLd = {
  "@context": "https://schema.org",
  "@type": "CreativeWork",
  name: title,
  abstract: summary,
  datePublished: new Date(date).toISOString(),
  keywords: [...units, ...(tags || [])].join(", "),
  educationalAlignment: alignment.map((code: string) => ({
    "@type": "AlignmentObject",
    alignmentType: "educationalSubject",
    educationalFramework: "CMI Level 7",
    targetName: code,
  })),
};
const url = new URL(Astro.request.url).toString();
---
<Base title={`${title} · Case Study · SMooks`} description={summary} canonical={url}>
  <main class="mx-auto max-w-3xl px-4 md:px-6 py-10">
    <a href="/case-studies" class="text-sm text-zinc-500 hover:text-zinc-700 dark:text-zinc-400 dark:hover:text-zinc-200">&larr; Back to Case Studies</a>
    <header class="mt-3 mb-6">
      <h1 class="text-3xl md:text-4xl font-bold tracking-tight">{title}</h1>
      <p class="mt-2 text-zinc-600 dark:text-zinc-300">{summary}</p>
      <p class="mt-2 text-sm text-zinc-500 dark:text-zinc-400">
        {new Date(date).toLocaleDateString(undefined, { year: "numeric", month: "long", day: "2-digit" })}
      </p>
      <div class="mt-4 flex flex-wrap gap-2">
        {units.map((u) => (
          <span class="text-xs rounded-full px-2.5 py-1 bg-zinc-100 dark:bg-zinc-800 text-zinc-700 dark:text-zinc-300 border border-zinc-200/60 dark:border-zinc-700/60">{u}</span>
        ))}
      </div>
    </header>

    <article class="prose prose-zinc dark:prose-invert max-w-none">
      <div set:html={code} />
    </article>

    {tags.length ? (
      <footer class="mt-10 border-t border-zinc-200/60 dark:border-zinc-800/80 pt-6">
        <div class="flex flex-wrap gap-2">
          {tags.map((t) => (
            <span class="text-xs uppercase tracking-wide rounded px-2 py-0.5 bg-zinc-50 dark:bg-zinc-800 text-zinc-500 dark:text-zinc-400 border border-zinc-200/50 dark:border-zinc-700/50">{t}</span>
          ))}
        </div>
      </footer>
    ) : null}
  </main>
  <script type="application/ld+json" set:html={JSON.stringify(jsonLd)} />
</Base>
