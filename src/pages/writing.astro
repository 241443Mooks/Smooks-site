---
// /src/pages/writing.astro
import { getCollection } from "astro:content";

const posts = (await getCollection("writing"))
  .filter((p) => !p.data.draft)
  .sort((a, b) => {
    const ad = new Date((a.data as any).pubDate ?? (a.data as any).date).getTime();
    const bd = new Date((b.data as any).pubDate ?? (b.data as any).date).getTime();
    return bd - ad;
  });
---

<head>
  <title>Writing — Systems, AI & Transformation | SMooks</title>
  <meta name="description" content="Curated essays on systems thinking, AI, leadership, and operational transformation. Read the highlights here and join the discussion on LinkedIn." />
  <meta name="robots" content="index,follow" />
  <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "CollectionPage",
      "name": "Writing — Systems, AI & Transformation",
      "description": "Curated essays on systems thinking, AI, leadership, and operational transformation.",
      "hasPart": [
        {
          "@type": "BlogPosting",
          "headline": "<?= posts.map(p => p.data.title).join('", "'); ?>"
        }
      ]
    }
  </script>
</head>

<section class="mx-auto max-w-6xl px-4 sm:px-6 lg:px-8 py-12">
  <header class="mb-10">
    <p class="text-sm uppercase tracking-widest text-gray-500 dark:text-gray-400">Writing</p>
    <h1 class="mt-2 text-3xl font-semibold leading-tight sm:text-4xl">Systems, AI & Transformation</h1>
    <p class="mt-3 max-w-2xl text-base text-gray-600 dark:text-gray-300">
      Short, sharp essays that move from ideas to action. Each piece links to the original post on LinkedIn — join the conversation there.
    </p>
  </header>

  <!-- Card grid -->
  <div class="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
    {posts.map(({ id, slug, data }) => (
      <article class="group relative flex flex-col rounded-2xl border border-gray-200 bg-white p-5 shadow-sm transition hover:shadow-md dark:border-gray-800 dark:bg-gray-900">
        <a href={`/writing/${slug}/`} class="absolute inset-0" aria-label={`Read ${data.title}`}></a>

        <div class="mb-3 flex flex-wrap gap-2">
          {(data.tags ?? []).slice(0, 3).map((tag) => (
            <span class="rounded-full border border-gray-200 px-2 py-0.5 text-xs text-gray-600 dark:border-gray-700 dark:text-gray-300">
              {tag}
            </span>
          ))}
        </div>

        <h2 class="text-lg font-semibold leading-snug group-hover:underline">
          {data.title}
        </h2>

        <p class="mt-2 line-clamp-3 text-sm text-gray-600 dark:text-gray-300">
          {data.description}
        </p>

        <div class="mt-4 flex items-center justify-between text-xs text-gray-500 dark:text-gray-400">
          {(() => {
            const date = new Date((data as any).pubDate ?? (data as any).date);
            return date.toLocaleDateString("en-US", {
              year: "numeric",
              month: "short",
              day: "numeric",
            });
          })()}
          {data.linkedin && (
            <a
              href={data.linkedin}
              target="_blank"
              rel="noopener noreferrer"
              class="underline decoration-dotted underline-offset-4 hover:decoration-solid"
              aria-label="Discuss this article on LinkedIn"
            >
              Discuss on LinkedIn →
            </a>
          )}
        </div>
      </article>
    ))}
  </div>
</section>
