---
import BaseLayout from "@/layouts/BaseLayout.astro";
import { getCollection } from 'astro:content';

export async function getStaticPaths() {
  const entries = await getCollection('case-studies');
  return entries.map((e) => ({ params: { slug: e.slug } }));
}

const entries = await getCollection('case-studies');
const slug = Array.isArray(Astro.params.slug) ? Astro.params.slug.join('/') : Astro.params.slug;
const entry = entries.find(e => e.slug === slug);
const data = entry!.data;
const { Content } = await entry!.render();
const title = data.seo?.title ?? data.title;
const description = data.seo?.description ?? data.summary;

const STREAM_LABELS: Record<string,string> = {
  'tech-digital':'Technology & Digital Transformation',
  'people-culture':'People, Culture & Community',
  'systems-automation':'Systems & Automation',
  'ops-modernisation':'Operational Efficiency & Modernisation',
  'education-learning':'Education & Learning',
  'leadership-governance':'Leadership, Strategy & Governance',
  'innovation-growth':'Innovation & Growth',
};

const jsonLd = {
  '@context': 'https://schema.org',
  '@type': 'Article',
  headline: data.title,
  description: description,
  datePublished: data.year,
  author: { '@type': 'Person', name: 'Sharron Mooks' },
  keywords: [...(data.tags||[])].join(', '),
};

const breadcrumb = {
  '@context': 'https://schema.org',
  '@type': 'BreadcrumbList',
  itemListElement: [
    { '@type': 'ListItem', position: 1, name: 'Streams', item: '/streams' },
    { '@type': 'ListItem', position: 2, name: STREAM_LABELS[data.stream], item: `/streams/${data.stream}` },
    { '@type': 'ListItem', position: 3, name: data.title, item: `/case-studies/${entry?.slug}` },
  ],
};
---
<BaseLayout title={title} description={description}>
  <article class="container mx-auto px-4 py-10 prose dark:prose-invert max-w-3xl">
    <header class="mb-6">
      <p class="text-sm text-gray-500">{data.year} · {data.organisation}</p>
      <h1 class="!mb-2">{data.title}</h1>
      <p class="text-gray-600 dark:text-gray-300">{data.summary}</p>
      <div class="mt-4 flex flex-wrap gap-2 text-xs">
        {data.cmi_units?.map(u => <span class="border px-2 py-1 rounded-full">CMI {u}</span>)}
        {data.tags?.map(t => <span class="border px-2 py-1 rounded-full">{t}</span>)}
      </div>
    </header>

    <Content />

    <section class="mt-8">
      <h2>Impact</h2>
      <ul class="grid sm:grid-cols-2 gap-3">
        {data.impact?.map(i => <li class="border rounded-xl p-3"><strong>{i.label}:</strong> {i.value}</li>)}
      </ul>
      {data.scale && <p class="mt-4 text-sm"><strong>Scale:</strong> {data.scale}</p>}
      {data.longevity && <p class="text-sm"><strong>Longevity:</strong> {data.longevity}</p>}
    </section>

    <footer class="mt-10">
      <a href={`/streams/${data.stream}`} class="text-sm underline">← Back to stream</a>
    </footer>
  </article>
  <script type="application/ld+json">{JSON.stringify(jsonLd)}</script>
  <script type="application/ld+json">{JSON.stringify(breadcrumb)}</script>
</BaseLayout>
