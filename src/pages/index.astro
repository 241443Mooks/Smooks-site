---
import { getCollection } from 'astro:content';
import Layout from "../layouts/Layout.astro";
import Hero from "../components/Hero.astro";
import FeaturedWin from "../components/FeaturedWin.astro";
import ValuePyramid from "../components/ValuePyramid.astro";
import FeaturedPlaybook from "../components/FeaturedPlaybook.astro";
import LatestWriting from "../components/LatestWriting.astro";
import AboutSnapshot from "../components/AboutSnapshot.astro";
import SiteFooter from "../components/SiteFooter.astro";

const safeGet = async (name) => {
  try { return await getCollection(name); } catch (_) { return []; }
};

const writing = await safeGet('writing');
const wins = await safeGet('wins');

const posts = writing
  .filter((p) => !p.data?.draft)
  .sort((a, b) => +new Date(b.data?.date ?? 0) - +new Date(a.data?.date ?? 0))
  .slice(0, 3)
  .map((p) => ({
    title: p.data?.title ?? 'Untitled',
    href: `/writing/${p.slug}`,
    excerpt: p.data?.description,
  }));

const featuredEntry = wins.find((w) => w?.data?.feature) ?? null;

const hero = {
  title: "I build systems that save time, cut waste, and create space for people to shine.",
  subtitle: "Sharron Mooks — Transformation Strategist, Systems Thinker, Change Leader.",
  ctaHref: "/wins",
};

const pyramid = {
  base: "Human-centred, data-driven, pragmatic leadership.",
  middle: "Designing scalable structures, automating workflows, simplifying the complex.",
  top: "Sustainable transformation, empowered teams, visible results.",
};

const playbook = {
  title: "Rome vs Empire — systemic design > chasing apps",
  summary: "A practical framework for moving from reactive tool adoption to intentional architecture.",
  ctaHref: "/playbooks",
};

const about = {
  blurb: "Strategist across engineering, tech start-ups, SMEs, and education. I simplify complexity so people can do their best work. Outside of work: hiking, caving, and tackling problem-solving challenges for fun.",
  ctaHref: "/about",
  imgSrc: "/images/sharron.jpg",
};

const featuredWin = featuredEntry && {
  title: featuredEntry.data.title,
  statA: { value: featuredEntry.data.stats.a.value, label: featuredEntry.data.stats.a.label },
  statB: { value: featuredEntry.data.stats.b.value, label: featuredEntry.data.stats.b.label },
  blurb: featuredEntry.data.summary,
  ctaHref: `/wins/${featuredEntry.slug}`,
};

const structuredData = {
  '@context': 'https://schema.org',
  '@type': 'Person',
  name: 'Sharron Mooks',
  url: 'https://www.smooks.co.uk',
  sameAs: ['https://www.linkedin.com/in/sharronmooks/']
};
---
<Layout title="SMooks — Transformation Strategist" structuredData={structuredData}>
  <Hero {...hero} />
  {featuredWin && <FeaturedWin {...featuredWin} />}
  <ValuePyramid {...pyramid} />
  <FeaturedPlaybook {...playbook} />
  <LatestWriting posts={posts} />
  <AboutSnapshot {...about} />
  <SiteFooter />
</Layout>
